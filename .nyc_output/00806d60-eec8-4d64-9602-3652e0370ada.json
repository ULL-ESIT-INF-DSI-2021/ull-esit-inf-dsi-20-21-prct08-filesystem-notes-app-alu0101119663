{"/home/usuario/Practicas/p8/src/notas.ts":{"path":"/home/usuario/Practicas/p8/src/notas.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":41}},"2":{"start":{"line":4,"column":11},"end":{"line":4,"column":24}},"3":{"start":{"line":5,"column":14},"end":{"line":5,"column":30}},"4":{"start":{"line":10,"column":0},"end":{"line":15,"column":56}},"5":{"start":{"line":11,"column":4},"end":{"line":11,"column":28}},"6":{"start":{"line":12,"column":4},"end":{"line":12,"column":31}},"7":{"start":{"line":13,"column":4},"end":{"line":13,"column":29}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":35}},"9":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"10":{"start":{"line":30,"column":12},"end":{"line":30,"column":60}},"11":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"12":{"start":{"line":33,"column":12},"end":{"line":33,"column":38}},"13":{"start":{"line":35,"column":8},"end":{"line":35,"column":27}},"14":{"start":{"line":46,"column":21},"end":{"line":46,"column":96}},"15":{"start":{"line":47,"column":27},"end":{"line":47,"column":53}},"16":{"start":{"line":48,"column":26},"end":{"line":48,"column":40}},"17":{"start":{"line":49,"column":29},"end":{"line":49,"column":63}},"18":{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},"19":{"start":{"line":51,"column":12},"end":{"line":59,"column":13}},"20":{"start":{"line":52,"column":16},"end":{"line":52,"column":53}},"21":{"start":{"line":53,"column":16},"end":{"line":53,"column":36}},"22":{"start":{"line":56,"column":16},"end":{"line":56,"column":82}},"23":{"start":{"line":57,"column":16},"end":{"line":57,"column":52}},"24":{"start":{"line":58,"column":16},"end":{"line":58,"column":33}},"25":{"start":{"line":62,"column":12},"end":{"line":62,"column":70}},"26":{"start":{"line":63,"column":12},"end":{"line":63,"column":78}},"27":{"start":{"line":64,"column":12},"end":{"line":64,"column":48}},"28":{"start":{"line":65,"column":12},"end":{"line":65,"column":29}},"29":{"start":{"line":75,"column":27},"end":{"line":75,"column":53}},"30":{"start":{"line":76,"column":8},"end":{"line":88,"column":9}},"31":{"start":{"line":77,"column":34},"end":{"line":77,"column":92}},"32":{"start":{"line":78,"column":34},"end":{"line":78,"column":70}},"33":{"start":{"line":79,"column":12},"end":{"line":79,"column":91}},"34":{"start":{"line":80,"column":12},"end":{"line":80,"column":85}},"35":{"start":{"line":81,"column":26},"end":{"line":81,"column":81}},"36":{"start":{"line":82,"column":12},"end":{"line":82,"column":24}},"37":{"start":{"line":85,"column":33},"end":{"line":85,"column":53}},"38":{"start":{"line":86,"column":12},"end":{"line":86,"column":49}},"39":{"start":{"line":87,"column":12},"end":{"line":87,"column":32}},"40":{"start":{"line":99,"column":21},"end":{"line":99,"column":96}},"41":{"start":{"line":100,"column":27},"end":{"line":100,"column":53}},"42":{"start":{"line":101,"column":26},"end":{"line":101,"column":53}},"43":{"start":{"line":102,"column":30},"end":{"line":102,"column":69}},"44":{"start":{"line":103,"column":30},"end":{"line":103,"column":53}},"45":{"start":{"line":104,"column":8},"end":{"line":118,"column":9}},"46":{"start":{"line":105,"column":12},"end":{"line":113,"column":13}},"47":{"start":{"line":106,"column":16},"end":{"line":106,"column":82}},"48":{"start":{"line":107,"column":16},"end":{"line":107,"column":52}},"49":{"start":{"line":108,"column":16},"end":{"line":108,"column":33}},"50":{"start":{"line":111,"column":16},"end":{"line":111,"column":54}},"51":{"start":{"line":112,"column":16},"end":{"line":112,"column":37}},"52":{"start":{"line":116,"column":12},"end":{"line":116,"column":50}},"53":{"start":{"line":117,"column":12},"end":{"line":117,"column":33}},"54":{"start":{"line":126,"column":8},"end":{"line":141,"column":9}},"55":{"start":{"line":127,"column":12},"end":{"line":127,"column":57}},"56":{"start":{"line":128,"column":24},"end":{"line":128,"column":26}},"57":{"start":{"line":129,"column":12},"end":{"line":134,"column":15}},"58":{"start":{"line":130,"column":34},"end":{"line":130,"column":81}},"59":{"start":{"line":131,"column":38},"end":{"line":131,"column":70}},"60":{"start":{"line":132,"column":16},"end":{"line":132,"column":86}},"61":{"start":{"line":133,"column":16},"end":{"line":133,"column":60}},"62":{"start":{"line":135,"column":12},"end":{"line":135,"column":25}},"63":{"start":{"line":138,"column":33},"end":{"line":138,"column":56}},"64":{"start":{"line":139,"column":12},"end":{"line":139,"column":49}},"65":{"start":{"line":140,"column":12},"end":{"line":140,"column":32}},"66":{"start":{"line":150,"column":27},"end":{"line":150,"column":53}},"67":{"start":{"line":151,"column":8},"end":{"line":161,"column":9}},"68":{"start":{"line":152,"column":12},"end":{"line":152,"column":65}},"69":{"start":{"line":153,"column":37},"end":{"line":153,"column":63}},"70":{"start":{"line":154,"column":12},"end":{"line":154,"column":55}},"71":{"start":{"line":155,"column":12},"end":{"line":155,"column":36}},"72":{"start":{"line":158,"column":39},"end":{"line":158,"column":99}},"73":{"start":{"line":159,"column":12},"end":{"line":159,"column":55}},"74":{"start":{"line":160,"column":12},"end":{"line":160,"column":38}},"75":{"start":{"line":164,"column":0},"end":{"line":164,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":1},"end":{"line":10,"column":2}},"loc":{"start":{"line":10,"column":20},"end":{"line":15,"column":1}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":23,"column":21}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":22},"end":{"line":36,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":49},"end":{"line":67,"column":5}},"line":45},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":29},"end":{"line":89,"column":5}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":52},"end":{"line":119,"column":5}},"line":98},"6":{"name":"(anonymous_6)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":24},"end":{"line":142,"column":5}},"line":125},"7":{"name":"(anonymous_7)","decl":{"start":{"line":129,"column":60},"end":{"line":129,"column":61}},"loc":{"start":{"line":129,"column":70},"end":{"line":134,"column":13}},"line":129},"8":{"name":"(anonymous_8)","decl":{"start":{"line":149,"column":4},"end":{"line":149,"column":5}},"loc":{"start":{"line":149,"column":33},"end":{"line":162,"column":5}},"line":149}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":13},"end":{"line":15,"column":54}},"type":"binary-expr","locations":[{"start":{"line":15,"column":13},"end":{"line":15,"column":28}},{"start":{"line":15,"column":33},"end":{"line":15,"column":53}}],"line":15},"1":{"loc":{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":31,"column":9}},{"start":{"line":29,"column":8},"end":{"line":31,"column":9}}],"line":29},"2":{"loc":{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":32,"column":8},"end":{"line":34,"column":9}},{"start":{"line":32,"column":8},"end":{"line":34,"column":9}}],"line":32},"3":{"loc":{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},"type":"if","locations":[{"start":{"line":50,"column":8},"end":{"line":66,"column":9}},{"start":{"line":50,"column":8},"end":{"line":66,"column":9}}],"line":50},"4":{"loc":{"start":{"line":51,"column":12},"end":{"line":59,"column":13}},"type":"if","locations":[{"start":{"line":51,"column":12},"end":{"line":59,"column":13}},{"start":{"line":51,"column":12},"end":{"line":59,"column":13}}],"line":51},"5":{"loc":{"start":{"line":76,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":88,"column":9}},{"start":{"line":76,"column":8},"end":{"line":88,"column":9}}],"line":76},"6":{"loc":{"start":{"line":104,"column":8},"end":{"line":118,"column":9}},"type":"if","locations":[{"start":{"line":104,"column":8},"end":{"line":118,"column":9}},{"start":{"line":104,"column":8},"end":{"line":118,"column":9}}],"line":104},"7":{"loc":{"start":{"line":105,"column":12},"end":{"line":113,"column":13}},"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":113,"column":13}},{"start":{"line":105,"column":12},"end":{"line":113,"column":13}}],"line":105},"8":{"loc":{"start":{"line":126,"column":8},"end":{"line":141,"column":9}},"type":"if","locations":[{"start":{"line":126,"column":8},"end":{"line":141,"column":9}},{"start":{"line":126,"column":8},"end":{"line":141,"column":9}}],"line":126},"9":{"loc":{"start":{"line":151,"column":8},"end":{"line":161,"column":9}},"type":"if","locations":[{"start":{"line":151,"column":8},"end":{"line":161,"column":9}},{"start":{"line":151,"column":8},"end":{"line":161,"column":9}}],"line":151}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":2,"10":1,"11":2,"12":1,"13":2,"14":4,"15":4,"16":4,"17":4,"18":4,"19":2,"20":1,"21":1,"22":1,"23":1,"24":1,"25":2,"26":2,"27":2,"28":2,"29":2,"30":2,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":3,"41":3,"42":3,"43":3,"44":3,"45":3,"46":2,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":2,"55":1,"56":1,"57":1,"58":2,"59":2,"60":2,"61":2,"62":1,"63":1,"64":1,"65":1,"66":3,"67":3,"68":1,"69":1,"70":1,"71":1,"72":2,"73":2,"74":2,"75":1},"f":{"0":1,"1":1,"2":2,"3":4,"4":2,"5":3,"6":2,"7":2,"8":3},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[2,2],"4":[1,1],"5":[1,1],"6":[2,1],"7":[1,1],"8":[1,1],"9":[1,2]},"inputSourceMap":{"version":3,"file":"/home/usuario/Practicas/p8/src/notas.ts","sources":["/home/usuario/Practicas/p8/src/notas.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as chalk from 'chalk';\n\n/**\n * enum con los posibles colores que pueden asociarse a las notas\n */\nexport enum colores {\n  rojo = 'red',\n  verde = 'green',\n  azul = 'blue',\n  amarillo = 'yellow'\n}\n\n/**\n * En esta clase notas implementamos los metodos añadir, leer, modificar, listar y borrar\n */\nexport class Notas {\n\n  /**\n   * Atributo privado notas\n   */\n  private static notas: Notas;\n\n  /**\n   * Constructor\n   */\n  private constructor() { }\n\n  /**\n   * \n   * @returns \n   */\n  public static getNotas(): Notas {\n    if (!fs.existsSync(`./ficheros`)) {\n      fs.mkdirSync(`./ficheros`, {recursive: true});       \n    }\n\n    if (!Notas.notas) {\n      Notas.notas = new Notas();\n    }\n\n    return Notas.notas;\n  }\n\n  /**\n   * Añade una nota en la ruta correspondiente del autor\n   * @param nombre Nombre del autor de la nota\n   * @param titulo Titulo de la nota\n   * @param contenido Contenido de nota\n   * @param color Color de la nota\n   * @returns Un mensaje dependiendo si va todo bien o no\n   */\n  anadirNota(nombre: string, titulo: string, contenido: string, color: colores): string {\n    const nota: string = `{\"titulo\": \"${titulo}\", \"contenido\": \"${contenido}\", \"color\": \"${color}\"}`;\n    const estiloJSON: string = titulo.split(' ').join('');\n    const mensajeOK: string = `Nota anadida`;\n    const mensajeError: string = `Existe una nota con dicho nombre`;\n\n    if(fs.existsSync(`./ficheros/${nombre}`)) {\n      if(fs.existsSync(`./ficheros/${nombre}/${estiloJSON}.json`)) {\n        console.log(chalk.red(mensajeError));\n        return mensajeError;\n      } else {\n        fs.writeFileSync(`./ficheros/${nombre}/${estiloJSON}.json`, nota);\n        console.log(chalk.green(mensajeOK));\n        return mensajeOK;\n      }\n    } else {\n      fs.mkdirSync(`./ficheros/${nombre}`, {recursive: true});\n      fs.writeFileSync(`./ficheros/${nombre}/${estiloJSON}.json`, nota);\n      console.log(chalk.green(mensajeOK));\n      return mensajeOK;\n    }\n  }\n\n  /**\n   * lee una nota de un determinado autor\n   * @param nombre Nombre del autor de la nota\n   * @param titulo Titulo de la nota\n   * @returns La nota o en caso de que no se encuentre un mensaje de error\n   */\n  leerNota(nombre: string, titulo: string) {\n    const estiloJSON: string = titulo.split(' ').join('');\n\n    if(fs.existsSync(`./ficheros/${nombre}/${estiloJSON}.json`)) {\n      const contenidoNota = fs.readFileSync(`./ficheros/${nombre}/${estiloJSON}.json`);\n      const contenidoJSON = JSON.parse(contenidoNota.toString());\n\n      console.log(chalk.keyword(contenidoJSON.color)(contenidoJSON.titulo + '\\n\\n'));\n      console.log(chalk.keyword(contenidoJSON.color)(contenidoJSON.contenido));\n\n      const nota: string = (contenidoJSON.titulo + '\\n\\n' + contenidoJSON.contenido);\n      return nota; \n    } else {\n      const mensajeError: string = `Nota no encontrada`;                                  \n      console.log(chalk.red(mensajeError));\n      return mensajeError;\n    }\n  }\n\n  /**\n   * Modifica una nota en concreto\n   * @param nombre Nombre del autor de la nota\n   * @param titulo Titulo de la nota\n   * @param contenido Contenido de la nota\n   * @param color Color de la nota\n   * @returns Un mensaje confirmando si ha ido todo de forma correcta, o no\n   */\n  modificarNota(nombre: string, titulo: string, contenido: string, color: colores): string {\n    const nota: string = `{\"titulo\": \"${titulo}\", \"contenido\": \"${contenido}\", \"color\": \"${color}\"}`;\n    const estiloJSON: string = titulo.split(' ').join('');\n    const mensajeOK: string = `La nota se ha sobrescrito`;\n    const mensajeError1: string = `No existe ninguna nota con ese nombre`;\n    const mensajeError2: string = `Usuario no encontrado`;\n\n    if(fs.existsSync(`./ficheros/${nombre}`)) {\n      if(fs.existsSync(`./ficheros/${nombre}/${estiloJSON}.json`)) {\n        fs.writeFileSync(`./ficheros/${nombre}/${estiloJSON}.json`, nota);\n\n        console.log(chalk.green(mensajeOK));\n        return mensajeOK;\n      } else {\n        console.log(chalk.red(mensajeError1));\n        return mensajeError1;\n      }\n    } else {\n      console.log(chalk.red(mensajeError2));\n      return mensajeError2;\n    }\n  }\n\n  /**\n   * Lista todas las notas de un determinado autor\n   * @param nombre Nombre del autor de la nota\n   * @returns Una lista con las notas del autor o un mensaje en caso de que no se haya encontrado el autor\n   */\n  listarNotas(nombre: string): string {\n    if (fs.existsSync(`./ficheros/${nombre}`)) {\n      console.log(`Tienes las siguientes notas: `);\n      let notas: string = '';\n\n      fs.readdirSync(`./ficheros/${nombre}/`).forEach((nota) => {\n        const contenido = fs.readFileSync(`./ficheros/${nombre}/${nota}`);\n        const contenidoJSON = JSON.parse(contenido.toString());\n\n        console.log(chalk.keyword(contenidoJSON.color)(contenidoJSON.titulo));\n        notas = notas + contenidoJSON.titulo + '\\n';\n      });\n      return notas;\n    } else {\n      const mensajeError: string = 'Usuario no encontrado';\n      console.log(chalk.red(mensajeError));\n      return mensajeError;\n    }\n  }\n\n  /**\n   * Elimina una nota en concreto de un autor\n   * @param nombre Nombre del autor de la nota\n   * @param titulo Titulo de la nota a eliminar\n   * @returns Un mensaje indicando si ha ido todo bien o no\n   */\n  eliminarNota(nombre: string, titulo: string) {\n    const estiloJSON: string = titulo.split(' ').join('');\n\n    if(fs.existsSync(`./ficheros/${nombre}/${estiloJSON}.json`)) {\n      fs.rmSync(`./ficheros/${nombre}/${estiloJSON}.json`);\n\n      const mensajeEliminado: string = 'Nota eliminada con exito';\n      console.log(chalk.green(mensajeEliminado));\n      return mensajeEliminado;\n    } else {\n      const mensajeNoEliminado: string = 'Nota no eliminada, posible error en la ruta o en el nombre';\n      console.log(chalk.red(mensajeNoEliminado));\n      return mensajeNoEliminado;\n    }\n  }\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f4f6ac6ffd353ad7f45a373858f5c0e2321273ec","contentHash":"336497def1fca8dce71771f161e7c55ec527dda755aea9ade7db4e9ddc79c553"}}